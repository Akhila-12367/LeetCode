class MyCircularDeque {
    private final int[] data;   // circular buffer
    private int head;           // index of the current front element
    private int tail;           // index *after* the current rear element
    private final int cap;      // physical length of the array (k + 1)

    /** Initialize deque with capacity k. */
    public MyCircularDeque(int k) {
        cap   = k + 1;          // one extra slot
        data  = new int[cap];
        head  = 0;
        tail  = 0;
    }

    /** Add item at front. Return true if the operation is successful. */
    public boolean insertFront(int value) {
        if (isFull()) return false;
        head = (head - 1 + cap) % cap;
        data[head] = value;
        return true;
    }

    /** Add item at rear. Return true if the operation is successful. */
    public boolean insertLast(int value) {
        if (isFull()) return false;
        data[tail] = value;
        tail = (tail + 1) % cap;
        return true;
    }

    /** Delete front item. Return true if the operation is successful. */
    public boolean deleteFront() {
        if (isEmpty()) return false;
        head = (head + 1) % cap;
        return true;
    }

    /** Delete rear item. Return true if the operation is successful. */
    public boolean deleteLast() {
        if (isEmpty()) return false;
        tail = (tail - 1 + cap) % cap;
        return true;
    }

    /** Get front item. Return -1 if deque is empty. */
    public int getFront() {
        return isEmpty() ? -1 : data[head];
    }

    /** Get last item. Return -1 if deque is empty. */
    public int getRear() {
        if (isEmpty()) return -1;
        int idx = (tail - 1 + cap) % cap;
        return data[idx];
    }

    /** Check whether deque is empty. */
    public boolean isEmpty() {
        return head == tail;
    }

    /** Check whether deque is full. */
    public boolean isFull() {
        return (tail + 1) % cap == head;
    }
}

/**
 * Your MyCircularDeque object will be instantiated and called as such:
 * MyCircularDeque obj = new MyCircularDeque(k);
 * boolean param_1 = obj.insertFront(value);
 * boolean param_2 = obj.insertLast(value);
 * boolean param_3 = obj.deleteFront();
 * boolean param_4 = obj.deleteLast();
 * int param_5 = obj.getFront();
 * int param_6 = obj.getRear();
 * boolean param_7 = obj.isEmpty();
 * boolean param_8 = obj.isFull();
 */
